#!/usr/bin/bash

function	backup_lfs_clean()
{
	lfs_virtualfs_disable
	lfs_mount
	find "${LFS}/sources/*" -type d -exec rm -rf {} \; || true
}

function	backup_lfs_get_id()
{
	# local	tot

	# while read -r i; do
	# 	local	n
	# 	n="$(sed -n "s|${DIR_BAK}||p")"
	# 	tot="${tot:+ + }${n}"
	# done < <(find "${DIR_BAK}" -name "*${LFS_BAK_EXT}")

	# echo "${tot:-empty}"
	wc -l < <(ls -lA "${DIR_BAK}/"*"${LFS_BAK_EXT}" 2>/dev/null)
}

function	backup_lfs()
{
	local	desc="${1:+-$1}"
	local	to_backup
	local	to_backup_id
	local	fmt

	to_backup_id=$(backup_lfs_get_id)

	backup_lfs_clean

	to_backup="${DIR_BAK}/${LFS_BAK_PREFIX}-$(backup_lfs_get_id)${desc}${LFS_BAK_EXT}"

	fmt="${BOL}${CYA}Creating incremental backup "
	fmt+="${GRE}${to_backup/${DIR_BASE}/}${RST}, lvl ${CYA}${to_backup_id}${RST}${RST_BOL}"
	pinfo "${fmt}"
	dset "${fmt}"

	_tar --create \
		--directory="${LFS}" .\
		--file="${to_backup}" \
		--listed-incremental="${LFS_BAK_META}" \
		--preserve-permissions \
		--use-compress-program="gzip -9"

	ppass "Backup done"
	dset "Backup done"
	lfs_virtualfs_enable
}

function	restore_lfs()
{
	local	lvl="${1:-}"
	local	cur_lvl=0
	local	fmt

	lfs_mount

	while read -r file; do
		fmt="${file##*-}"
		fmt="Restoring backup ${CYA}${fmt%%.*}${RST}, lvl ${GRE}${cur_lvl}${RST}"
		pinfo "${fmt}"
		dset "${fmt}"

		_tar --extract \
			--verbose \
			--listed-incremental=/dev/null \
			--file="${file}" \
			--directory="${LFS}" \
			--preserve-permissions

		[ "${lvl}" == "${cur_lvl}" ] && break
		((cur_lvl++)) || true
	done < <(find "${DIR_BAK}" -name "${LFS_BAK_PREFIX}*${LFS_BAK_EXT}" | sort)

	fmt="Restored backup ${GRE}${DIR_BAK/${DIR_BASE}\/}${RST}"
	ppass "${fmt}"
	dset "${fmt}"
}
