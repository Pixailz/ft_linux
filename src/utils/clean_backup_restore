#!/usr/bin/bash

function	clean_lfs()
{
	do_chroot rm -rf /usr/share/{info,man,doc}/*
	do_chroot find /usr/{lib,libexec} -name \*.la -delete
	do_chroot rm -rf /tools

	_umount "${LFS}/dev/shm"
	_umount "${LFS}/dev/pts"
	for folder in sys proc run dev; do
		_umount "${LFS}/${folder}"
	done

	find "${LFS}/sources/*" -type d -exec rm -rf {} \; || true
}

function	backup_lfs()
{
	local	file_desc="${1:-}"
	local	file="lfs-${LFS_DISTRO_VERSION}-${LFS_DISTRO_CODENAME}-${PACKAGE_VERSION[linux]}"
	[ "${LFS_GIT_VERSION}" != "" ] && file+="-${LFS_GIT_VERSION}"
	[ "${file_desc}" != "" ] && file+="-${file_desc}"
	file+="-$(date +%d%m%Y%H%M%S).tar.gz"

	clean_lfs

	_cp "${LOG_FILE_EXEC}" "${LOG_FILE_DIR}/exec.log"
	_pushd "${LOG_FILE_DIR}/.."
	_tar -I 'gzip -9' -cpf "${LFS_SOURCES_DIR}/log.tar.gz" ./log
	_popd
	_rm "${LOG_FILE_DIR}/exec.log"

	_pushd "${LFS}"
	pinfo "Creating backup ${file}"
	dset "${BOL}${CYA}Creating backup ${GRE}${file}${RST}${RST_BOL}"
	# GZIP MAXED
	_tar -I 'gzip -9' -cpf "${DIR_BASE}/${file}" .
	# BZIP2
	# tar -cjpf "${DIR_BASE}/${file}" .
	# XZ ...
	# tar -czpf "${DIR_BASE}/${file}" .
	ppass "Backup done"

	mount_lfs
	create_virtualfs
	_popd
}

function	restore_lfs()
{
	local	backup_file="${DIR_BASE}/${1}"

	if [ ! -f "${backup_file}" ]; then
		pfail "Backup file ${backup_file} not found"
		return
	fi

	mount_lfs
	_pushd "${LFS}"
	pinfo "Restoring backup ${backup_file}"
	dset "Restoring backup ${CYA}${backup_file/${DIR_BASE}/}${RST}"
	tar -xpf "${backup_file}"
	ppass "Restore done"
	dset "Restoring backup ${GRE}done${RST}"
	_popd
}
