#!/bin/bash

# BASH PROPRETIES
## Exit immediately if a command exits with a non-zero status
set -e
## Treat unset variables as an error when substituting
set -u
## Error in pipeline will be shown
set -o pipefail

# RUNASROOT
[ "${UID}" != "0" ] && { echo "Error: run as root"; exit 1;}

# VARIABLES
## cli args
: ${1:?"Error: missing Disk Device"}
export TARGET_DISK="${1}"

PATH_BASE=$(realpath ${BASH_SOURCE[0]})
export DIR_BASE=${PATH_BASE%/*}

## LFS
export LFS="/mnt/lfs"
export LFS_ARCH=$(uname -m)
export LFS_CORES=$(nproc)
export LFS_TGT=${LFS_ARCH}-lfs-linux-gnu
export LFS_SOURCES_DIR="${LFS}/sources"

# source needed files
source ${DIR_BASE}/src/include

set +h
umask 022
LC_ALL=POSIX
PATH=/usr/bin:/usr/sbin
if [ ! -L /bin ]; then PATH=/bin:${PATH}; fi
PATH=${LFS}/tools/bin:${PATH}
CONFIG_SITE=/usr/share/config.site
export MAKEFLAGS="-j${LFS_CORES}"
export LFS LC_ALL LFS_TGT PATH CONFIG_SITE

LOG_FILE=${DIR_BASE}/exec.log

function	prepare()
{
	# checkup
	# partition
	download_sources
	# create_lfs
}

function	cross_compile()
{
	export MAKEFLAGS="-j1"
	compile_binutils_pass1
	export MAKEFLAGS="-j${LFS_CORES}"
	compile_gcc_pass1
	fix_linux_headers
	compile_glibc
	compile_libstdcxx
}

function	temp_tool()
{
	# compile_m4
	# compile_ncurses
	# compile_bash
	# compile_coreutils
	# compile_diffutils
	# compile_file
	# compile_findutils
	# compile_gawk
	# compile_grep
	# compile_gzip
	# compile_make
	# compile_patch
	# compile_sed
	# compile_tar
	# compile_xz
	compile_binutils_pass2
	compile_gcc_pass2
}

set_sbu

# prepare
# cross_compile
temp_tool

unset LFS LFS_SOURCES_DIR TARGET_DISK

exit 0
